1) С помощью Socket.IO можно реализовать аналитику в реальном времени, многопользовательские игры, обмен мгновенными сообщениями и совместную работу с документами в реальном времени.

2) https://socket.io/images/bidirectional-communication2.png

3) Устройство может в любой момент времени и передавать, и принимать информацию. Передача и приём ведутся устройством одновременно по двум физически разделённым каналам связи

4)
JavaScript (Node.js) 
JavaScript (Deno)
Java
Python
Golang
JavaScript (for WeChat Mini-Programs)
C++
Swift
Dart
.Net
Rust
Kotlin

5) Socket.IO позволяет транслировать сообщение всем подключенным клиентам.
Socket.IO поддерживает прокси-серверы и балансировщики из коробки.
Socket.IO может использовать технологии, отличные от WebSockets, если клиент не поддерживает WebSockets.
Если соединение WebSocket разрывается, оно не будет автоматически переподключаться.

6) Long Polling — это технология, которая позволяет получать данные о новых событиях с помощью «длинных запросов». Сервер получает запрос, но отправляет ответ на него не сразу, а лишь тогда, когда произойдет какое-либо событие (например, придёт новое сообщение), либо истечет заданное время ожидания. Используя этот подход, вы можете мгновенно отображать в своем приложении важные события.

7) Broadcasting - обмен данными в режиме реального времени

8) Multiplexing - общее соединение

9) Пространство имен - это канал связи, который позволяет разделить логику вашего приложения по одному общему соединению.
Возможные варианты использования:
вы хотите создать специальное пространство имен, к которому имеют доступ только авторизованные пользователи, чтобы логика, связанная с этими пользователями, была отделена от остальной части приложения
ваше приложение имеет несколько клиентов, поэтому вы хотите динамически создавать одно пространство имен для каждого клиента.